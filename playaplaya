#!/usr/bin/python

import pygst
pygst.require("0.10")
import gst
import pygtk
import gtk
import gtk.glade
import gobject
import os

class Main(object):
    MSECS_PER_TICK = 200

    COL_NUM=0
    COL_FILENAME=1

    def __init__(self, *args, **kwargs):
        super(Main, self).__init__(*args, **kwargs)

        self._current_pos = None
        self._current_duration = None
        self._current_file = None
        self._current_playlist = None

        self._init_gui()
        self._init_gst()
        self._main_win.show()

    def _init_gui(self):
        filename = "gui.glade"

        self._builder = gtk.Builder()
        self._builder.add_from_file(filename)
        self._builder.connect_signals(self)

        self._TIME_FORMAT = gst.Format(gst.FORMAT_TIME)

        self._playliststore = self._builder.get_object('playliststore')
        self._playPauseButton = self._builder.get_object('playPauseButton')
        self._slider = self._builder.get_object('playerHScale')

        # add treeview columns
        treeview = self._builder.get_object('playlistview')
        cell0 = gtk.CellRendererText()
        cell1 = gtk.CellRendererText()
        col0 = gtk.TreeViewColumn("Num", cell0, text=self.__class__.COL_NUM)
        col1 = gtk.TreeViewColumn("Filename", cell1, text=self.__class__.COL_FILENAME)
        treeview.append_column(col0)
        treeview.append_column(col1)

        gobject.timeout_add(self.__class__.MSECS_PER_TICK, self.on_tick)

        self._main_win = self._builder.get_object('mainwin')
        self._main_win.show()

    def _init_gst(self):
        self._player = gst.Pipeline("player")
        source = gst.element_factory_make("filesrc", "file-source")
        decoder = gst.element_factory_make("mad", "mp3-decoder")
        conv = gst.element_factory_make("audioconvert", "converter")
        sink = gst.element_factory_make("alsasink", "alsa-output")

        self._player.add(source, decoder, conv, sink)
        gst.element_link_many(source, decoder, conv, sink)

        bus = self._player.get_bus()
        bus.add_signal_watch()
        bus.connect("message", self.on_message)

    def _restore_position_for_file(self, playlist, fpath):
        self._current_pos = 0
        self._player.seek_simple(self._TIME_FORMAT, gst.SEEK_FLAG_FLUSH, self._current_pos)

    def _play_new_file(self, fpath):
        self._playPauseButton.set_label("Pause")
        self._player.get_by_name("file-source").set_property("location", fpath)
        self._current_file = fpath
        self._restore_position_for_file(self._current_playlist, fpath)
        self._player.set_state(gst.STATE_PLAYING)

    def on_book_open_menuitem_activate(self, widget):
        file_chooser = self._builder.get_object('playlistchooserdialog')
        file_chooser.show()

    def on_mainwin_destroy(self, widget):
        gtk.main_quit()

    def _install_playlist_lines(self, lines):
        playliststore = self._builder.get_object("playliststore")
        playliststore.clear()
        count = 1
        for l in lines:
            r = playliststore.append([count, l])
            print "added '%s', got %r" % (l, r)
            count += 1
        self._main_win.show()

    def _load_playlist(self, fname):
        fp = open(fname, 'r')
        lines = fp.readlines()
        lines = [ l.strip() for l in lines ]
        lines = [ l for l in lines if not l.startswith('#') ]
        fp.close()
        fp = None
        self._current_playlist = fname
        return lines

    def on_playlistchooserdialog_file_activated(self, filedialog):
        lines = self._load_playlist(filedialog.get_filename())
        self._install_playlist_lines(lines)
        filedialog.hide()

    def on_playlistview_cursor_changed(self, widget):
        path, col = widget.get_cursor()
        it = self._playliststore.get_iter(path)
        filepath = self._playliststore.get_value(it, 1)
        self._play_new_file(filepath)

    def on_message(self, bus, message):
        t = message.type

        if t == gst.MESSAGE_EOS:
            self._player.set_state(gst.STATE_NULL)
            self._button.set_label("Start")
        elif t == gst.MESSAGE_ERROR:
            self._player.set_state(gst.STATE_NULL)
            self._button.set_label("Start")
            err, debug = message.parse_error()
            print "Error: %s" % err, debug

    def on_tick(self):
        states = self._player.get_state()
        if gst.STATE_PLAYING in states:
            try:
                self._current_pos = self._player.query_position(self._TIME_FORMAT)[0]
                self._current_duration = self._player.query_duration(self._TIME_FORMAT)[0]
                print "Current duration:", self._current_duration
                self._slider.set_range(0.0, float(self._current_duration))
                self._slider.set_value(float(self._current_pos))
            except gst.QueryError:
                return True
        return True

    def OnPlay(self, widget):
        self.pipeline.set_state(gst.STATE_PLAYING)

    def OnStop(self, widget):
        self.pipeline.set_state(gst.STATE_READY)

main = Main()
gtk.gdk.threads_init()
gtk.main()

if main._current_pos:
    print "Last position:", main._current_pos
